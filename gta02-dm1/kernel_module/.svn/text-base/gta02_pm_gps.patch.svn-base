Index: linux-2.6.22.5/arch/arm/common/Makefile
===================================================================
--- linux-2.6.22.5.orig/arch/arm/common/Makefile	2007-11-27 17:29:13.000000000 +0800
+++ linux-2.6.22.5/arch/arm/common/Makefile	2007-11-27 17:29:45.000000000 +0800
@@ -17,4 +17,4 @@
 obj-$(CONFIG_SHARP_SCOOP)	+= scoop.o
 obj-$(CONFIG_ARCH_IXP2000)	+= uengine.o
 obj-$(CONFIG_ARCH_IXP23XX)	+= uengine.o
-obj-$(CONFIG_MACH_NEO1973_GTA01)+= gta01_pm_gsm.o gta01_pm_gps.o gta01_pm_bt.o
+obj-$(CONFIG_MACH_NEO1973_GTA01)+= gta01_pm_gsm.o gta02_pm_gps.o gta01_pm_bt.o
Index: linux-2.6.22.5/arch/arm/common/gta02_pm_gps.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.22.5/arch/arm/common/gta02_pm_gps.c	2007-11-27 17:30:56.000000000 +0800
@@ -0,0 +1,146 @@
+/*
+ * GSM Management code for the FIC Neo1973 GSM Phone
+ *
+ * (C) 2007 by OpenMoko Inc.
+ * Author: Harald Welte <laforge@openmoko.org>
+ * All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/console.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+
+#include <asm/hardware.h>
+#include <asm/mach-types.h>
+#include <linux/pcf50633.h>
+#include <asm/arch/gta01.h>
+#include <asm/arch/gta02.h>
+
+int gps_state=0;
+
+static ssize_t gps_read(struct device *dev, struct device_attribute *attr,
+			char *buf)
+{
+	unsigned int vol;	
+	vol = pcf50633_voltage_get(pcf50633_global,PCF50633_REGULATOR_LDO5);
+	dev_info (dev, "Get PCF50633 LDO5 = %d",vol);
+
+	return sprintf(buf, "%d  LDO5=%d\n",gps_state, vol);
+}
+
+static ssize_t gps_write(struct device *dev, struct device_attribute *attr,
+			 const char *buf, size_t count)
+{
+	unsigned long on = simple_strtoul(buf, NULL, 10);
+
+	if (!strcmp(attr->attr.name, "power_on")) {
+		if (on) {
+			dev_info(dev, "powering up AGPS");
+
+			pcf50633_voltage_set(pcf50633_global,PCF50633_REGULATOR_LDO5, 3000);
+			pcf50633_ldo5ena_set(pcf50633_global,0x01);			
+			gps_state = 1;
+		} else {
+
+			pcf50633_voltage_set(pcf50633_global,PCF50633_REGULATOR_LDO5, 0);
+			pcf50633_ldo5ena_set(pcf50633_global,0x00);
+			gps_state = 0;
+			dev_info(dev, "powered down AGPS");
+		}
+	}
+	return count;
+}
+
+static DEVICE_ATTR(power_on, 0644, gps_read, gps_write);
+//static DEVICE_ATTR(reset, 0644, gps_read, gps_write);
+//static DEVICE_ATTR(download, 0644, gps_read, gps_write);
+
+#ifdef CONFIG_PM
+static int gta02_gps_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	/* GPIO state is saved/restored by S3C2410 core GPIO driver, so we
+	 * don't need to do anything here */
+
+	return 0;
+}
+
+static int gta02_gps_resume(struct platform_device *pdev)
+{
+	/* GPIO state is saved/restored by S3C2410 core GPIO driver, so we
+	 * don't need to do anything here */
+
+	/* Make sure that the kernel console on the serial port is still
+	 * disabled. FIXME: resume ordering race with serial driver! */
+
+	return 0;
+}
+#else
+#define gta02_gps_suspend	NULL
+#define gta02_gps_resume	NULL
+#endif
+
+static struct attribute *gta02_gps_sysfs_entries[] = {
+	&dev_attr_power_on.attr,
+	//&dev_attr_reset.attr,
+	NULL,
+	NULL
+};
+
+static struct attribute_group gta02_gps_attr_group = {
+	.name	= NULL,
+	.attrs	= gta02_gps_sysfs_entries,
+};
+
+static int __init gta02_gps_probe(struct platform_device *pdev)
+{
+	switch (system_rev) {
+		case GTA02v2_SYSTEM_REV:
+ 			return sysfs_create_group(&pdev->dev.kobj, &gta02_gps_attr_group);
+		default:
+			return -1;
+	}
+	
+	
+}
+
+static int gta02_gps_remove(struct platform_device *pdev)
+{
+	sysfs_remove_group(&pdev->dev.kobj, &gta02_gps_attr_group);
+
+	return 0;
+}
+
+static struct platform_driver gta02_gps_driver = {
+	.probe		= gta02_gps_probe,
+	.remove		= gta02_gps_remove,
+	.suspend	= gta02_gps_suspend,
+	.resume		= gta02_gps_resume,
+	.driver		= {
+		.name		= "gta02-pm-gps",
+	},
+};
+
+static int __devinit gta02_gps_init(void)
+{
+	return platform_driver_register(&gta02_gps_driver);
+}
+
+static void gta02_gps_exit(void)
+{
+	platform_driver_unregister(&gta02_gps_driver);
+}
+
+module_init(gta02_gps_init);
+module_exit(gta02_gps_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("FIC GTA02 (Neo1973) GPS Management");
